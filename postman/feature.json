{
	"info": {
		"_postman_id": "ae7c788f-28b5-4b77-bf37-dd001948ea9a",
		"name": "Test Explore With Me - Feature(subscriptions)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26099146"
	},
	"item": [
		{
			"name": "Добавление пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const target = pm.response.json();",
							"pm.collectionVariables.set('user1Id', target.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"ivan.petrov@practicummail.ru\",\n  \"name\": \"Иван Петров\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление пользователя 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const target = pm.response.json();",
							"pm.collectionVariables.set('user2Id', target.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"mariya.sidorova@practicummail.ru\",\n  \"name\": \"Мария Сидорова\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление пользователя 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const target = pm.response.json();",
							"pm.collectionVariables.set('user3Id', target.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"anna.ivanova@practicummail.ru\",\n  \"name\": \"Анна Иванова\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление пользователя 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const target = pm.response.json();",
							"pm.collectionVariables.set('user4Id', target.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"nikolay.fedorov@practicummail.ru\",\n  \"name\": \"Николай Федоров\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление пользователя 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const target = pm.response.json();",
							"pm.collectionVariables.set('user5Id', target.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"artem.baboyan@practicummail.ru\",\n  \"name\": \"Артем Бабоян\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление категории 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const target = pm.response.json();",
							"pm.collectionVariables.set('cat1Id', target.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Концерты\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление категории 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const target = pm.response.json();",
							"pm.collectionVariables.set('cat2Id', target.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Сплавы\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление события 1 от пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const target = pm.response.json();",
							"pm.collectionVariables.set('event1Id', target.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user1Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление события 2 от пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const target = pm.response.json();",
							"pm.collectionVariables.set('event2Id', target.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"annotation\": \"Очень похожий сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2025-01-01 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 1,\n  \"requestModeration\": false,\n  \"title\": \"Очень похожий плав на байдарках\"\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user1Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление события 3 от пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const target = pm.response.json();",
							"pm.collectionVariables.set('event3Id', target.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"annotation\": \"Оркестр на свежем воздухе\",\n  \"category\": 1,\n  \"description\": \"Симфонический орекстр сыграет в парке культуры и отдыхв\",\n  \"eventDate\": \"2024-11-03 10:10:05\",\n  \"location\": {\n    \"lat\": 35.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": false,\n  \"requestModeration\": false,\n  \"title\": \"Оркестр на траве\"\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user1Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация события 1",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"stateAction\": \"PUBLISH_EVENT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{event1Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация события 2",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"stateAction\": \"PUBLISH_EVENT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{event2Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация события 3",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"stateAction\": \"PUBLISH_EVENT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{event3Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление подтвержденной заявки на участие пользователя 2 в событии 1",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/requests?eventId={{event1Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"requests"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{event1Id}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user2Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление подтвержденной заявки на участие пользователя 2 в событии 2",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/requests?eventId={{event2id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"requests"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{event2id}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user2id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление подтвержденной заявки на участие пользователя 3 в событии 1",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/requests?eventId={{event1id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"requests"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{event1id}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user3Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление подтвержденной заявки на участие пользователя 4 в событии 3",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/requests?eventId={{event3Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"requests"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{event3Id}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user4Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление заявки в друзья самому себе",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление заявки в друзья несуществующему пользователю",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.have.status(404);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/999",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"999"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление заявки в друзья от несуществующего пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.have.status(404);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/999/friends/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"999",
						"friends",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user1Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление заявки в друзья пользователем 5 пользователю 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);   ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Заявка в друзья должна содержать поля: id, requester, friend, status, created\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('requester');",
							"pm.expect(target).to.have.property('friend');",
							"pm.expect(target).to.have.property('status');",
							"pm.expect(target).to.have.property('created');",
							"});",
							"",
							"pm.test(\"При создании у заявки на участие должен быть статус PENDING\", function () {",
							"    pm.expect(target.status).equal(\"PENDING\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/:friendId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						":friendId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						},
						{
							"key": "friendId",
							"value": "{{user1Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление заявки в друзья при наличии ранее поданной заявки",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/:friendId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						":friendId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						},
						{
							"key": "friendId",
							"value": "{{user1Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление заявки в друзья к пользователю при наличии входящей заявки от него",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/:friendId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						":friendId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user1Id}}"
						},
						{
							"key": "friendId",
							"value": "{{user5Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление заявки в друзья пользователем 5 пользователю 2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"mariya.sidorova@practicummail.ru\",\n  \"name\": \"Мария Сидорова\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/:friendId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						":friendId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						},
						{
							"key": "friendId",
							"value": "{{user2Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление заявки в друзья пользователем 5 пользователю 3",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"mariya.sidorova@practicummail.ru\",\n  \"name\": \"Мария Сидорова\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/:friendId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						":friendId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						},
						{
							"key": "friendId",
							"value": "{{user3Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление заявки в друзья пользователем 5 пользователю 4",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"mariya.sidorova@practicummail.ru\",\n  \"name\": \"Мария Сидорова\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/:friendId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						":friendId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						},
						{
							"key": "friendId",
							"value": "{{user4Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение входящих заявок на добавление в друзья пользователем 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json()[0];",
							"",
							"pm.test(\"Заявка в друзья должна содержать поля: id, requester, friend, status, created\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('requester');",
							"pm.expect(target).to.have.property('friend');",
							"pm.expect(target).to.have.property('status');",
							"pm.expect(target).to.have.property('created');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/incoming",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"incoming"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user2Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение входящих заявок на добавление в друзья при их отсутствии",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Ответ должен быть пустым массивом\", function () {",
							"    pm.expect(target.length).to.be.equal(0);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/incoming",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"incoming"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение исходящих заявок на добавление в друзья пользователем 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json()[0];",
							"",
							"pm.test(\"Заявка в друзья должна содержать поля: id, requester, friend, status, created\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('requester');",
							"pm.expect(target).to.have.property('friend');",
							"pm.expect(target).to.have.property('status');",
							"pm.expect(target).to.have.property('created');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/outgoing",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"outgoing"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение исходящих заявок на добавление в друзья при их отсутствии",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Ответ должен быть пустым массивом\", function () {",
							"    pm.expect(target.length).to.be.equal(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/outgoing",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"outgoing"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user1Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Подтверждение входящей заявки на добавление в друзья пользователем 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json()[0];",
							"",
							"pm.test(\"Заявка в друзья должна содержать поля: id, requester, friend, status, created\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('requester');",
							"pm.expect(target).to.have.property('friend');",
							"pm.expect(target).to.have.property('status');",
							"pm.expect(target).to.have.property('created');",
							"});",
							"",
							"pm.test(\"При подтверждении у заявки на участие должен быть статус CONFIRMED\", function () {",
							"    pm.expect(target.status).equal(\"CONFIRMED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"requestIds\": [\n    3\n  ],\n  \"status\": \"CONFIRMED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/incoming",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"incoming"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user2Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Подтверждение входящей заявки на добавление в друзья без поля requestIds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.be.badRequest;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"status\": \"CONFIRMED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/incoming",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"incoming"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user2Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Подтверждение входящей заявки на добавление в друзья без поля status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.be.badRequest;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"status\": \"CONFIRMED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/incoming",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"incoming"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user2Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Отклонение входящей заявки на добавление в друзья пользователем 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json()[0];",
							"",
							"pm.test(\"Заявка в друзья должна содержать поля: id, requester, friend, status, created\", function () {",
							"    pm.expect(target).to.have.property('id');",
							"    pm.expect(target).to.have.property('requester');",
							"    pm.expect(target).to.have.property('friend');",
							"    pm.expect(target).to.have.property('status');",
							"    pm.expect(target).to.have.property('created');",
							"});",
							"",
							"pm.test(\"При отклонении у заявки на участие должен быть статус REJECTED\", function () {",
							"    pm.expect(target.status).equal(\"REJECTED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"requestIds\": [\n    4\n  ],\n  \"status\": \"REJECTED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/incoming",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"incoming"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user3Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Отклонение входящей заявки на добавление в друзья в неподходящем статусе",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"requestIds\": [\n    3\n  ],\n  \"status\": \"REJECTED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/incoming",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"incoming"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user2Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Подтверждение входящей заявки на добавление в друзья в неподходящем статусе",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"requestIds\": [\n    3\n  ],\n  \"status\": \"CONFIRMED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/incoming",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"incoming"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user2Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Попытка отменить входящую заявки на добавление в друзья",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"requestIds\": [\n    1\n  ],\n  \"status\": \"CANCELED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/incoming",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"incoming"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user1Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Отмена исходящей заявки на добавление в друзья пользователем 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json()[0];",
							"",
							"pm.test(\"Заявка в друзья должна содержать поля: id, requester, friend, status, created\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('requester');",
							"pm.expect(target).to.have.property('friend');",
							"pm.expect(target).to.have.property('status');",
							"pm.expect(target).to.have.property('created');",
							"});",
							"",
							"pm.test(\"При подтверждении у заявки на участие должен быть статус CANCELED\", function () {",
							"    pm.expect(target.status).equal(\"CANCELED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"requestIds\": [\n    1\n  ],\n  \"status\": \"CANCELED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/outgoing",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"outgoing"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Отмена ранее отклоненной другом исходящей заявки на добавление в друзья",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json()[0];",
							"",
							"pm.test(\"Заявка в друзья должна содержать поля: id, requester, friend, status, created\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('requester');",
							"pm.expect(target).to.have.property('friend');",
							"pm.expect(target).to.have.property('status');",
							"pm.expect(target).to.have.property('created');",
							"});",
							"",
							"pm.test(\"При подтверждении у заявки на участие должен быть статус CANCELED\", function () {",
							"    pm.expect(target.status).equal(\"CANCELED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"requestIds\": [\n    4\n  ],\n  \"status\": \"CANCELED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/outgoing",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"outgoing"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Отмена исходящей заявки на добавление в друзья пользователем 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"requestIds\": [\n    5\n  ],\n  \"status\": \"CANCELED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/outgoing",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"outgoing"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Повторная отправка ранее отмененной исходящей заявки на добавление в друзья",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json()[0];",
							"",
							"pm.test(\"Заявка в друзья должна содержать поля: id, requester, friend, status, created\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('requester');",
							"pm.expect(target).to.have.property('friend');",
							"pm.expect(target).to.have.property('status');",
							"pm.expect(target).to.have.property('created');",
							"});",
							"",
							"pm.test(\"При подтверждении у заявки на участие должен быть статус PENDING\", function () {",
							"    pm.expect(target.status).equal(\"PENDING\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"requestIds\": [\n    5\n  ],\n  \"status\": \"PENDING\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/outgoing",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"outgoing"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Попытка отправки на рассмотрение исходящей заявки на добавление в друзья в неподходящем статусе",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"requestIds\": [\n    3\n  ],\n  \"status\": \"PENDING\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/outgoing",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"outgoing"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Попытка отмены исходящей заявки на добавление в друзья в неподходящем статусе",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"requestIds\": [\n    3\n  ],\n  \"status\": \"CANCELED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/outgoing",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"outgoing"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка друзей пользователем 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json()[0];",
							"",
							"pm.test(\"Пользователь друг должен содержать поля: id, name\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('name');",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Отклонение ранее подтвержденной заявки в друзья",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/:friendId/reject",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						":friendId",
						"reject"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						},
						{
							"key": "friendId",
							"value": "{{user2Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка друзей при их отсутствии",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Ответ должен быть пустым массивом\", function () {",
							"    pm.expect(target.length).to.be.equal(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка актуальных событий, в которых друзья пользователя 5 принимают участие при отсутствии друзей",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Ответ должен быть пустым массивом\", function () {",
							"    pm.expect(target.length).to.be.equal(0);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Подтверждение заявки на добавление в друзья пользователем 5 от пользователя 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json()[0];",
							"",
							"pm.test(\"Заявка в друзья должна содержать поля: id, requester, friend, status, created\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('requester');",
							"pm.expect(target).to.have.property('friend');",
							"pm.expect(target).to.have.property('status');",
							"pm.expect(target).to.have.property('created');",
							"});",
							"",
							"pm.test(\"При подтверждении у заявки на участие должен быть статус CONFIRMED\", function () {",
							"    pm.expect(target.status).equal(\"CONFIRMED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"requestIds\": [\n    3\n  ],\n  \"status\": \"CONFIRMED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/requests/incoming",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"requests",
						"incoming"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка актуальных событий, в которых друзья пользователя 5 принимают участие, при наличии друзей",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json()[0];",
							"",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('title');",
							"pm.expect(target).to.have.property('annotation');",
							"pm.expect(target).to.have.property('category');",
							"pm.expect(target).to.have.property('paid');",
							"pm.expect(target).to.have.property('eventDate');",
							"pm.expect(target).to.have.property('initiator');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friends/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friends",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user5Id}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "userId1",
			"value": ""
		},
		{
			"key": "userId",
			"value": ":userId"
		},
		{
			"key": "user1Id",
			"value": "0"
		},
		{
			"key": "event1Id",
			"value": "0"
		},
		{
			"key": "event2Id",
			"value": "0"
		},
		{
			"key": "event3Id",
			"value": "0"
		},
		{
			"key": "user2Id",
			"value": "0"
		},
		{
			"key": "user2id",
			"value": "0"
		},
		{
			"key": "event2id",
			"value": "0"
		},
		{
			"key": "user3Id",
			"value": "0"
		},
		{
			"key": "event1id",
			"value": "0"
		},
		{
			"key": "user4Id",
			"value": "0"
		},
		{
			"key": "user5Id",
			"value": "0"
		}
	]
}